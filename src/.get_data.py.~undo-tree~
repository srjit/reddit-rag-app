(undo-tree-save-format-version . 1)
"ab4b4a50f5bfef5034293ed1f48c16cb6ad2ceff"
[nil nil nil nil (26553 19549 487025 367000) 0 nil]
([nil nil ((1 . 5) (t . -1)) nil (26553 19549 487024 758000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("
" 0 1 (fontified t)) . -2) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (#("
" 0 1 (fontified t)) . -3) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("
" 0 1 (fontified t)) . -4) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) 5) nil (26553 19549 487024 41000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1630 . 1631) (nil fontified nil 1 . 1631) (1 . 1631)) nil (26553 19549 486849 411000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . -1630) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) 1631) nil (26553 19549 486849 119000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face font-lock-string-face)) . -76) (undo-tree-id71 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -77) (undo-tree-id72 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -78) (undo-tree-id73 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -79) (undo-tree-id74 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -80) (undo-tree-id75 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -81) (undo-tree-id76 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -82) (undo-tree-id77 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -83) (undo-tree-id78 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -84) (undo-tree-id79 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -85) (undo-tree-id80 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -86) (undo-tree-id81 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -87) (undo-tree-id82 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -88) (undo-tree-id83 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -89) (undo-tree-id84 . -1) 90) nil (26553 19549 486847 668000) 0 nil])
([nil nil ((nil rear-nonsticky nil 97 . 98) (nil fontified nil 76 . 98) (76 . 98)) nil (26553 19549 486844 363000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face font-lock-string-face)) . -117) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -118) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -119) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -120) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -121) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -122) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -123) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -124) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -125) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -126) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -127) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -128) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -129) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -130) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -131) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -132) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -133) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -134) (undo-tree-id69 . -1) (undo-tree-id70 . -1) 135) nil (26553 19549 486843 551000) 0 nil])
([nil nil ((nil rear-nonsticky nil 146 . 147) (nil fontified nil 117 . 147) (117 . 147)) nil (26553 19549 486833 216000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face font-lock-string-face)) . -163) (undo-tree-id20 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -164) (undo-tree-id21 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -165) (undo-tree-id22 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -166) (undo-tree-id23 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -167) (undo-tree-id24 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -168) (undo-tree-id25 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -169) (undo-tree-id26 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -170) (undo-tree-id27 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -171) (undo-tree-id28 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -172) (undo-tree-id29 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -173) (undo-tree-id30 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -174) (undo-tree-id31 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -175) (undo-tree-id32 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -176) (undo-tree-id33 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -177) (undo-tree-id34 . -1) 178) nil (26553 19549 486832 306000) 0 nil])
([nil nil ((nil rear-nonsticky nil 221 . 222) (nil fontified nil 163 . 222) (163 . 222)) nil (26553 19549 486828 53000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t face font-lock-string-face)) . -201) (undo-tree-id0 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -202) (undo-tree-id1 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -203) (undo-tree-id2 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -204) (undo-tree-id3 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -205) (undo-tree-id4 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -206) (undo-tree-id5 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -207) (undo-tree-id6 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -208) (undo-tree-id7 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -209) (undo-tree-id8 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -210) (undo-tree-id9 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -211) (undo-tree-id10 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -212) (undo-tree-id11 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -213) (undo-tree-id12 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -214) (undo-tree-id13 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -215) (undo-tree-id14 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -216) (undo-tree-id15 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -217) (undo-tree-id16 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -218) (undo-tree-id17 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -219) (undo-tree-id18 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -220) (undo-tree-id19 . -1) 221) nil (26553 19549 486826 939000) 0 nil])
([nil nil ((201 . 213)) nil (26553 19549 486813 378000) 0 nil])
([nil nil ((1686 . 1687) 213) nil (26553 19549 486810 863000) 0 nil])
([nil nil ((1555 . 1563) (t 26553 19549 491606 694000)) nil (26553 19667 416148 335000) 0 nil])
([nil nil ((#("
# Initialize Reddit API Client
reddit = praw.Reddit(
    client_id=CLIENT_ID,
    client_secret=CLIENT_SECRET,
    user_agent=USER_AGENT
)

# Function to fetch top N posts and their comments with a delay
def fetch_reddit_data(subreddit_name, limit=10, sleep_time=2):
    subreddit = reddit.subreddit(subreddit_name)
    data = []

    for post in subreddit.hot(limit=limit):  # Fetch hot posts
        post_data = {
            \"title\": post.title,
            \"selftext\": post.selftext,  # Post content
            \"url\": post.url,
            \"score\": post.score,
            \"id\": post.id,
            \"num_comments\": post.num_comments,
            \"comments\": []
        }

        # Load top-level comments
        post.comments.replace_more(limit=5)  # Avoid \"More Comments\" placeholders
        for comment in post.comments.list():
            post_data[\"comments\"].append({
                \"id\": comment.id,
                \"body\": comment.body,
                \"score\": comment.score,
                \"author\": str(comment.author)
            })

        data.append(post_data)

        # Sleep between requests to avoid hitting rate limits
        time.sleep(sleep_time)

    return data

# Fetch data from a subreddit
subreddit_data = fetch_reddit_data(\"machinelearning\", limit=5, sleep_time=2)

# Save to JSON file
with open(\"../data/reddit_data.json\", \"w\", encoding=\"utf-8\") as f:
    json.dump(subreddit_data, f, indent=4)

print(\"Data saved to reddit_data.json\")
" 0 1 (fontified t) 1 3 (face font-lock-comment-delimiter-face fontified t) 3 32 (face font-lock-comment-face fontified t) 32 38 (face font-lock-variable-name-face fontified t) 38 141 (fontified t) 141 143 (face font-lock-comment-delimiter-face fontified t) 143 205 (face font-lock-comment-face fontified t) 205 208 (face font-lock-keyword-face fontified t) 208 209 (fontified t) 209 226 (face font-lock-function-name-face fontified t) 226 336 (fontified t) 336 339 (face font-lock-keyword-face fontified t) 339 345 (fontified t) 345 347 (face font-lock-keyword-face fontified t) 347 377 (fontified t) 377 379 (face font-lock-comment-delimiter-face fontified t) 379 395 (face font-lock-comment-face fontified t) 395 429 (fontified t) 429 436 (face font-lock-string-face fontified t) 436 462 (fontified t) 462 472 (face font-lock-string-face fontified t) 472 490 (fontified t) 490 492 (face font-lock-comment-delimiter-face fontified t) 492 505 (face font-lock-comment-face fontified t) 505 517 (fontified t) 517 522 (face font-lock-string-face fontified t) 522 546 (fontified t) 546 553 (face font-lock-string-face fontified t) 553 579 (fontified t) 579 583 (face font-lock-string-face fontified t) 583 590 (fontified t) 590 592 (face font-lock-builtin-face fontified t) 592 606 (fontified t) 606 620 (face font-lock-string-face fontified t) 620 653 (fontified t) 653 663 (face font-lock-string-face fontified t) 663 687 (fontified t) 687 689 (face font-lock-comment-delimiter-face fontified t) 689 713 (face font-lock-comment-face fontified t) 713 758 (fontified t) 758 760 (face font-lock-comment-delimiter-face fontified t) 760 795 (face font-lock-comment-face fontified t) 795 803 (fontified t) 803 806 (face font-lock-keyword-face fontified t) 806 815 (fontified t) 815 817 (face font-lock-keyword-face fontified t) 817 832 (fontified t) 832 836 (face font-lock-builtin-face fontified t) 836 862 (fontified t) 862 872 (face font-lock-string-face fontified t) 872 899 (fontified t) 899 903 (face font-lock-string-face fontified t) 903 913 (fontified t) 913 915 (face font-lock-builtin-face fontified t) 915 933 (fontified t) 933 939 (face font-lock-string-face fontified t) 939 971 (fontified t) 971 978 (face font-lock-string-face fontified t) 978 1011 (fontified t) 1011 1019 (face font-lock-string-face fontified t) 1019 1021 (fontified t) 1021 1024 (face font-lock-builtin-face fontified t) 1024 1097 (fontified t) 1097 1099 (face font-lock-comment-delimiter-face fontified t) 1099 1151 (face font-lock-comment-face fontified t) 1151 1187 (fontified t) 1187 1193 (face font-lock-keyword-face fontified t) 1193 1200 (fontified t) 1200 1202 (face font-lock-comment-delimiter-face fontified t) 1202 1230 (face font-lock-comment-face fontified t) 1230 1265 (fontified t) 1265 1282 (face font-lock-string-face fontified t) 1282 1285 (fontified t) 1285 1307 (fontified t) 1307 1308 (fontified t) 1308 1310 (face font-lock-comment-delimiter-face fontified t) 1310 1328 (face font-lock-comment-face fontified t) 1328 1332 (face font-lock-keyword-face fontified t) 1332 1333 (fontified t) 1333 1337 (face font-lock-builtin-face fontified t) 1337 1338 (fontified t) 1338 1364 (face font-lock-string-face fontified t) 1364 1366 (fontified t) 1366 1369 (face font-lock-string-face fontified t) 1369 1380 (fontified t) 1380 1387 (face font-lock-string-face fontified t) 1387 1389 (fontified t) 1389 1391 (face font-lock-keyword-face fontified t) 1391 1439 (fontified t) 1439 1444 (face font-lock-builtin-face fontified t) 1444 1445 (fontified t) 1445 1477 (face font-lock-string-face fontified t) 1477 1479 (fontified t)) . -216) (undo-tree-id0 . -1479) (undo-tree-id1 . -141) (undo-tree-id2 . -1479) (undo-tree-id3 . -1479) (undo-tree-id4 . -403) (undo-tree-id5 . -403) (undo-tree-id6 . -403) (undo-tree-id7 . -415) (undo-tree-id8 . -403) (undo-tree-id9 . -403) (undo-tree-id10 . -403) (undo-tree-id11 . -415) (undo-tree-id12 . -403) (undo-tree-id13 . -403) (undo-tree-id14 . -403) (undo-tree-id15 . -415) (undo-tree-id16 . -403) (undo-tree-id17 . -403) (undo-tree-id18 . -403) (undo-tree-id19 . -415) (undo-tree-id20 . -403) (undo-tree-id21 . -403) (undo-tree-id22 . -403) (undo-tree-id23 . -415) (undo-tree-id24 . -403) (undo-tree-id25 . -403) (undo-tree-id26 . -403) (undo-tree-id27 . -415) (undo-tree-id28 . -403) (undo-tree-id29 . -403) (undo-tree-id30 . -403) (undo-tree-id31 . -415) (undo-tree-id32 . -852) (undo-tree-id33 . -852) (undo-tree-id34 . -852) (undo-tree-id35 . -852) (undo-tree-id36 . -852) (undo-tree-id37 . -852) (undo-tree-id38 . -852) (undo-tree-id39 . -852) (undo-tree-id40 . -852) (undo-tree-id41 . -852) (undo-tree-id42 . -852) (undo-tree-id43 . -852) (undo-tree-id44 . -852) (undo-tree-id45 . -852) (undo-tree-id46 . -1230) (undo-tree-id47 . -1230) (undo-tree-id48 . -1291) (undo-tree-id49 . -1328) (undo-tree-id50 . -1328) (undo-tree-id51 . -1328) (undo-tree-id52 . -1328) (undo-tree-id53 . -1328) (undo-tree-id54 . -1328) (undo-tree-id55 . -1439) (undo-tree-id56 . -1439) (undo-tree-id57 . -1) (undo-tree-id58 . -1057) (undo-tree-id59 . -1088) (undo-tree-id60 . -1089) (undo-tree-id61 . -1151) (undo-tree-id62 . -1182) (undo-tree-id63 . -1183) (undo-tree-id64 . -1199) (undo-tree-id65 . -1200) (undo-tree-id66 . -1230) (undo-tree-id67 . -1307) (undo-tree-id68 . -1308) (undo-tree-id69 . -1328) (undo-tree-id70 . -1395) (undo-tree-id71 . -1438) (undo-tree-id72 . -1439) (undo-tree-id73 . -1479) (undo-tree-id74 . -505) (undo-tree-id75 . -450) (undo-tree-id76 . -417) (undo-tree-id77 . -395) (undo-tree-id78 . -332) (undo-tree-id79 . -331) (undo-tree-id80 . -317) (undo-tree-id81 . -268) (undo-tree-id82 . -205) (undo-tree-id83 . -141) (undo-tree-id84 . -140) (undo-tree-id85 . -138) (undo-tree-id86 . -112) (undo-tree-id87 . -79) (undo-tree-id88 . -54) (undo-tree-id89 . -32) (undo-tree-id90 . -1) (undo-tree-id91 . -1479) (undo-tree-id92 . -1) (undo-tree-id93 . -1057) (undo-tree-id94 . -1088) (undo-tree-id95 . -1089) (undo-tree-id96 . -1151) (undo-tree-id97 . -1182) (undo-tree-id98 . -1183) (undo-tree-id99 . -1199) (undo-tree-id100 . -1200) (undo-tree-id101 . -1230) (undo-tree-id102 . -1307) (undo-tree-id103 . -1308) (undo-tree-id104 . -1328) (undo-tree-id105 . -1395) (undo-tree-id106 . -1438) (undo-tree-id107 . -1439) (undo-tree-id108 . -1479) (undo-tree-id109 . -1479) 1695 (t 26553 19667 432363 961000)) nil (26553 20335 140359 864000) 0 nil])
([nil nil ((216 . 218)) nil (26553 20335 140200 986000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2217 . 2218) (nil fontified nil 218 . 2218) (218 . 2218)) nil (26553 20335 140200 597000) 0 nil])
([nil nil ((2085 . 2093)) nil (26553 20335 140198 55000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified nil)) . 1357) (undo-tree-id135 . -1) (#("            # Fetch comments using praw" 0 12 (fontified t) 12 14 (face font-lock-comment-delimiter-face fontified t) 14 39 (face font-lock-comment-face fontified t)) . -1357) (undo-tree-id136 . -19) (t 26553 20335 156046 235000)) nil (26553 20363 796475 332000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1776) (undo-tree-id114 . -1) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1777) (undo-tree-id115 . -1) (#("A" 0 1 (face font-lock-comment-face fontified t)) . -1778) (undo-tree-id116 . -1) (#("v" 0 1 (face font-lock-comment-face fontified t)) . -1779) (undo-tree-id117 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -1780) (undo-tree-id118 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -1781) (undo-tree-id119 . -1) (#("d" 0 1 (face font-lock-comment-face fontified t)) . -1782) (undo-tree-id120 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -1783) (undo-tree-id121 . -1) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -1784) (undo-tree-id122 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -1785) (undo-tree-id123 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -1786) (undo-tree-id124 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -1787) (undo-tree-id125 . -1) (#("-" 0 1 (face font-lock-comment-face fontified t)) . -1788) (undo-tree-id126 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -1789) (undo-tree-id127 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -1790) (undo-tree-id128 . -1) (#("m" 0 1 (face font-lock-comment-face fontified t)) . -1791) (undo-tree-id129 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -1792) (undo-tree-id130 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -1793) (undo-tree-id131 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -1794) (undo-tree-id132 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -1795) (undo-tree-id133 . -1) (#("g" 0 1 (face font-lock-comment-face fontified t)) . -1796) (undo-tree-id134 . -1) 1797) nil (26553 20363 796473 186000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1774) (undo-tree-id112 . -1) (#(" " 0 1 (fontified t)) . -1775) (undo-tree-id113 . -1) 1776) nil (26553 20363 796464 750000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified nil)) . 218) (undo-tree-id110 . -1) (#("# Initialize Reddit API Clients" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 31 (face font-lock-comment-face fontified t)) . -218) (undo-tree-id111 . -31)) nil (26553 20363 796461 793000) 0 nil])
([nil nil ((218 . 220) (t 26553 20363 812203 482000)) nil (26553 20388 91282 255000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -218) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("
" 0 1 (fontified t)) . -219) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) 220) nil (26553 20388 91281 707000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-comment-face fontified t)) . -336) (undo-tree-id163 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -337) (undo-tree-id164 . -1) (#("f" 0 1 (face font-lock-comment-face fontified t)) . -338) (undo-tree-id165 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -339) (undo-tree-id166 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -340) (undo-tree-id167 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -341) (undo-tree-id168 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -342) (undo-tree-id169 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -343) (undo-tree-id170 . -1) 344) nil (26553 20388 91277 513000) 0 nil])
([nil nil ((336 . 337)) nil (26553 20388 91275 549000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -409) (undo-tree-id140 . -1) (#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -410) (undo-tree-id141 . -1) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -411) (undo-tree-id142 . -1) (#("C" 0 1 (face font-lock-comment-face fontified t)) . -412) (undo-tree-id143 . -1) (#("u" 0 1 (face font-lock-comment-face fontified t)) . -413) (undo-tree-id144 . -1) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -414) (undo-tree-id145 . -1) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -415) (undo-tree-id146 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -416) (undo-tree-id147 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -417) (undo-tree-id148 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -418) (undo-tree-id149 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -419) (undo-tree-id150 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -420) (undo-tree-id151 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -421) (undo-tree-id152 . -1) (#("m" 0 1 (face font-lock-comment-face fontified t)) . -422) (undo-tree-id153 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -423) (undo-tree-id154 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -424) (undo-tree-id155 . -1) (#("(" 0 1 (face font-lock-comment-face fontified t)) . -425) (undo-tree-id156 . -1) (#("U" 0 1 (face font-lock-comment-face fontified t)) . -426) (undo-tree-id157 . -1) (#("T" 0 1 (face font-lock-comment-face fontified t)) . -427) (undo-tree-id158 . -1) (#("C" 0 1 (face font-lock-comment-face fontified t)) . -428) (undo-tree-id159 . -1) (#(")" 0 1 (face font-lock-comment-face fontified t)) . -429) (undo-tree-id160 . -1) (undo-tree-id161 . 1) (undo-tree-id162 . -1) 430) nil (26553 20388 91274 535000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -408) (undo-tree-id139 . -1) 409) nil (26553 20388 91267 969000) 0 nil])
([nil nil ((496 . 497)) nil (26553 20388 91267 472000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified nil)) . 498) (undo-tree-id138 . -1) (#("# Function to fetch posts within the time range" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 47 (face font-lock-comment-face fontified t)) . -498)) nil (26553 20388 91267 119000) 0 nil])
([nil nil ((565 . 566)) nil (26553 20388 91265 750000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified nil)) . 570) (undo-tree-id137 . -1) (#("# Fetch posts from Pushshift" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 28 (face font-lock-comment-face fontified t)) . -570)) nil (26553 20388 91263 714000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-comment-face fontified t)) . -811) (undo-tree-id200 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -812) (undo-tree-id201 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -813) (undo-tree-id202 . -1) (#("d" 0 1 (face font-lock-comment-face fontified t)) . -814) (undo-tree-id203 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -815) (undo-tree-id204 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -816) (undo-tree-id205 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -817) (undo-tree-id206 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -818) (undo-tree-id207 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -819) (undo-tree-id208 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -820) (undo-tree-id209 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -821) (undo-tree-id210 . -1) (#("u" 0 1 (face font-lock-comment-face fontified t)) . -822) (undo-tree-id211 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -823) (undo-tree-id212 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -824) (undo-tree-id213 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -825) (undo-tree-id214 . -1) (#("g" 0 1 (face font-lock-comment-face fontified t)) . -826) (undo-tree-id215 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -827) (undo-tree-id216 . -1) (#("p" 0 1 (face font-lock-comment-face fontified t)) . -828) (undo-tree-id217 . -1) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -829) (undo-tree-id218 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -830) (undo-tree-id219 . -1) (#("w" 0 1 (face font-lock-comment-face fontified t)) . -831) (undo-tree-id220 . -1) 832 (t 26553 20388 96336 736000)) nil (26553 20395 219002 306000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -796) (undo-tree-id185 . -1) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -797) (undo-tree-id186 . -1) (#("F" 0 1 (face font-lock-comment-face fontified t)) . -798) (undo-tree-id187 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -799) (undo-tree-id188 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -800) (undo-tree-id189 . -1) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -801) (undo-tree-id190 . -1) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -802) (undo-tree-id191 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -803) (undo-tree-id192 . -1) (#("f" 0 1 (face font-lock-comment-face fontified t)) . -804) (undo-tree-id193 . -1) (#("u" 0 1 (face font-lock-comment-face fontified t)) . -805) (undo-tree-id194 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -806) (undo-tree-id195 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -807) (undo-tree-id196 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -808) (undo-tree-id197 . -1) (#("p" 0 1 (face font-lock-comment-face fontified t)) . -809) (undo-tree-id198 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -810) (undo-tree-id199 . -1) 811) nil (26553 20395 218995 922000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -794) (undo-tree-id183 . -1) (#(" " 0 1 (fontified t)) . -795) (undo-tree-id184 . -1) 796) nil (26553 20395 218988 831000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified nil)) . 1817) (undo-tree-id221 . -1) (#("# Save to JSON file" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 19 (face font-lock-comment-face fontified t)) . -1817) (undo-tree-id222 . -19) (t 26553 20395 236375 914000)) nil (26553 20414 613282 648000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 566) (#(" " 0 1 (fontified t)) . 566) (#(" " 0 1 (fontified t)) . 566) (#(" " 0 1 (fontified t)) . 566) (t 26553 20414 616482 262000)) nil (26553 20490 438755 274000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-comment-face fontified t)) . -488) (undo-tree-id232 . -1) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -489) (undo-tree-id233 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -490) (undo-tree-id234 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -491) (undo-tree-id235 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -492) (undo-tree-id236 . -1) (#("g" 0 1 (face font-lock-comment-face fontified t)) . -493) (undo-tree-id237 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -494) (undo-tree-id238 . -1) 495 (t 26553 20490 444898 365000)) nil (26553 20500 490136 19000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -479) (undo-tree-id223 . -1) (#(" " 0 1 (fontified t)) . -480) (undo-tree-id224 . -1) (#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -481) (undo-tree-id225 . -1) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -482) (undo-tree-id226 . -1) (#("3" 0 1 (face font-lock-comment-face fontified t)) . -483) (undo-tree-id227 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -484) (undo-tree-id228 . -1) (#("m" 0 1 (face font-lock-comment-face fontified t)) . -485) (undo-tree-id229 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -486) (undo-tree-id230 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -487) (undo-tree-id231 . -1) 488) nil (26553 20500 490131 860000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -530) (undo-tree-id4 . -1) 531 (t 26553 20500 496953 525000)) nil (26553 20557 165791 563000) 0 nil])
([nil nil ((530 . 532)) nil (26553 20557 165790 715000) 0 nil])
([nil nil ((532 . 533)) nil (26553 20557 165790 304000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -1794) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 1795) nil (26553 20557 165789 628000) 0 nil])
([nil nil ((1794 . 1797)) nil (26553 20557 165777 649000) 0 nil])
([nil nil ((36 . 38) (t 26553 20557 185264 592000)) nil (26553 20591 521904 458000) 0 nil])
([nil nil ((nil rear-nonsticky nil 143 . 144) (nil fontified nil 38 . 144) (38 . 144)) nil (26553 20591 521904 180000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("import praw" 0 6 (face font-lock-keyword-face fontified t) 6 11 (fontified t)) . -1) (undo-tree-id19 . -11)) nil (26553 20591 521903 760000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("import json" 0 6 (face font-lock-keyword-face fontified t) 6 11 (fontified t)) . -1) (undo-tree-id16 . -11)) nil (26553 20591 521902 610000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("
" 0 1 (fontified nil)) . 1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#("import time" 0 6 (face font-lock-keyword-face fontified t) 6 11 (fontified t)) . -1) (undo-tree-id9 . -11)) nil (26553 20591 521898 626000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -618) (undo-tree-id0 . -1) 619 (t 26553 20591 529453 51000)) nil (26553 20658 828776 980000) 0 nil])
([nil nil ((618 . 619)) nil (26553 20658 828767 462000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id343 . -1) (#("reddit = praw.Reddit(client_id=CLIENT_ID, client_secret=CLIENT_SECRET, user_agent=USER_AGENT)" 0 6 (face font-lock-variable-name-face fontified t) 6 93 (fontified t)) . -289) (t 26553 20658 833822 382000)) nil (26553 21038 488716 315000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 289) (undo-tree-id341 . -1) (#("
" 0 1 (fontified nil)) . 289) (undo-tree-id342 . -1) (#("api = PushshiftAPI()" 0 3 (face font-lock-variable-name-face fontified t) 3 20 (fontified t)) . -289)) nil (26553 21038 488715 688000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified nil)) . 289) (undo-tree-id340 . -1) (#("# Time range (last 3 months)" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 28 (face font-lock-comment-face fontified t)) . -289)) nil (26553 21038 488715 33000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id339 . -1) (#("end_time = int(datetime.utcnow().timestamp())" 0 11 (fontified nil) 11 14 (face font-lock-builtin-face fontified nil) 14 45 (fontified nil)) . -289)) nil (26553 21038 488714 595000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id335 . -1) (#("
" 0 1 (fontified t)) . 289) (undo-tree-id336 . -1) (#("
" 0 1 (fontified nil)) . 289) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("start_time = int((datetime.utcnow() - timedelta(days=90)).timestamp())" 0 10 (face font-lock-variable-name-face fontified t) 10 13 (fontified t) 13 16 (face font-lock-builtin-face fontified t) 16 70 (fontified t)) . -289)) nil (26553 21038 488714 12000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 289) (undo-tree-id333 . -1) (#("
" 0 1 (fontified nil)) . 289) (undo-tree-id334 . -1) (#("def fetch_reddit_data(subreddit_name, max_posts=1000, sleep_time=1):" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 21 (face font-lock-function-name-face fontified t) 21 68 (fontified t)) . -289)) nil (26553 21038 488712 307000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id332 . -1) (#("    posts = api.search_submissions(subreddit=subreddit_name, after=start_time, before=end_time, limit=max_posts)" 0 4 (fontified t) 4 9 (face font-lock-variable-name-face fontified t) 9 112 (fontified t)) . -289)) nil (26553 21038 488711 431000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id331 . -1) (#("    " 0 4 (fontified t)) . -289)) nil (26553 21038 488710 986000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id330 . -1) (#("    data = []" 0 4 (fontified t) 4 8 (face font-lock-variable-name-face fontified t) 8 13 (fontified t)) . -289)) nil (26553 21038 488710 479000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id329 . -1) (#("    for post in posts:" 0 4 (fontified nil) 4 7 (face font-lock-keyword-face fontified nil) 7 13 (fontified nil) 13 15 (face font-lock-keyword-face fontified nil) 15 22 (fontified nil)) . -289)) nil (26553 21038 488710 34000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id328 . -1) (#("        try:" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t)) . -289)) nil (26553 21038 488709 554000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id321 . -1) (#("            praw_post = reddit.submission(id=post[\"id\"])" 0 12 (fontified t) 12 21 (face font-lock-variable-name-face fontified t) 21 42 (fontified t) 42 44 (face font-lock-builtin-face fontified t) 44 50 (fontified t) 50 54 (face font-lock-string-face fontified t) 54 56 (fontified t)) . -289) (undo-tree-id322 . -12) (undo-tree-id323 . -12) (undo-tree-id324 . -46) (undo-tree-id325 . -12) (undo-tree-id326 . -12) (undo-tree-id327 . -46)) nil (26553 21038 488708 879000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id288 . -1) (#("            post_data = {" 0 12 (fontified t) 12 21 (face font-lock-variable-name-face fontified t) 21 25 (fontified t)) . -289) (undo-tree-id289 . -12) (undo-tree-id290 . -12) (undo-tree-id291 . -12) (undo-tree-id292 . -24) (undo-tree-id293 . -12) (undo-tree-id294 . -12) (undo-tree-id295 . -12) (undo-tree-id296 . -24) (undo-tree-id297 . -12) (undo-tree-id298 . -12) (undo-tree-id299 . -12) (undo-tree-id300 . -24) (undo-tree-id301 . -12) (undo-tree-id302 . -12) (undo-tree-id303 . -12) (undo-tree-id304 . -24) (undo-tree-id305 . -12) (undo-tree-id306 . -12) (undo-tree-id307 . -12) (undo-tree-id308 . -24) (undo-tree-id309 . -12) (undo-tree-id310 . -12) (undo-tree-id311 . -12) (undo-tree-id312 . -24) (undo-tree-id313 . -12) (undo-tree-id314 . -12) (undo-tree-id315 . -12) (undo-tree-id316 . -24) (undo-tree-id317 . -12) (undo-tree-id318 . -12) (undo-tree-id319 . -12) (undo-tree-id320 . -24)) nil (26553 21038 488700 60000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id287 . -1) (#("                \"title\": praw_post.title," 0 16 (fontified nil) 16 23 (face font-lock-string-face fontified nil) 23 41 (fontified nil)) . -289)) nil (26553 21038 488690 774000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id280 . -1) (#("                \"selftext\": praw_post.selftext," 0 16 (fontified t) 16 26 (face font-lock-doc-face fontified t) 26 47 (fontified t)) . -289) (undo-tree-id281 . -16) (undo-tree-id282 . -16) (undo-tree-id283 . -16) (undo-tree-id284 . -16) (undo-tree-id285 . -47) (undo-tree-id286 . -16)) nil (26553 21038 488690 342000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id279 . -1) (#("                \"url\": praw_post.url," 0 16 (fontified nil) 16 21 (face font-lock-string-face fontified nil) 21 37 (fontified nil)) . -289)) nil (26553 21038 488688 425000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id272 . -1) (#("                \"score\": praw_post.score," 0 16 (fontified t) 16 23 (face font-lock-doc-face fontified t) 23 41 (fontified t)) . -289) (undo-tree-id273 . -16) (undo-tree-id274 . -16) (undo-tree-id275 . -16) (undo-tree-id276 . -16) (undo-tree-id277 . -41) (undo-tree-id278 . -16)) nil (26553 21038 488687 891000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id271 . -1) (#("                \"id\": praw_post.id," 0 16 (fontified nil) 16 20 (face font-lock-string-face fontified nil) 20 32 (fontified nil) 32 34 (face font-lock-builtin-face fontified nil) 34 35 (fontified nil)) . -289)) nil (26553 21038 488685 595000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id264 . -1) (#("                \"num_comments\": praw_post.num_comments," 0 16 (fontified t) 16 30 (face font-lock-doc-face fontified t) 30 55 (fontified t)) . -289) (undo-tree-id265 . -16) (undo-tree-id266 . -16) (undo-tree-id267 . -16) (undo-tree-id268 . -16) (undo-tree-id269 . -55) (undo-tree-id270 . -16)) nil (26553 21038 488685 49000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id263 . -1) (#("                \"created_utc\": praw_post.created_utc," 0 16 (fontified nil) 16 29 (face font-lock-string-face fontified nil) 29 53 (fontified nil)) . -289)) nil (26553 21038 488682 792000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id256 . -1) (#("                \"comments\": []" 0 16 (fontified t) 16 26 (face font-lock-doc-face fontified t) 26 30 (fontified t)) . -289) (undo-tree-id257 . -16) (undo-tree-id258 . -16) (undo-tree-id259 . -16) (undo-tree-id260 . -16) (undo-tree-id261 . -30) (undo-tree-id262 . -16)) nil (26553 21038 488681 560000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 289) (undo-tree-id254 . -1) (#("
" 0 1 (fontified nil)) . 289) (undo-tree-id255 . -1) (#("            }" 0 13 (fontified nil)) . -289)) nil (26553 21038 488679 642000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id253 . -1) (#("            praw_post.comments.replace_more(limit=5)" 0 52 (fontified nil)) . -289)) nil (26553 21038 488678 947000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id252 . -1) (#("            for comment in praw_post.comments.list():" 0 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 24 (fontified t) 24 26 (face font-lock-keyword-face fontified t) 26 46 (fontified t) 46 50 (face font-lock-builtin-face fontified t) 50 53 (fontified t)) . -289)) nil (26553 21038 488677 822000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id237 . -1) (#("                post_data[\"comments\"].append({" 0 26 (fontified nil) 26 36 (face font-lock-string-face fontified nil) 36 46 (fontified nil)) . -289) (undo-tree-id238 . -16) (undo-tree-id239 . -16) (undo-tree-id240 . -16) (undo-tree-id241 . -16) (undo-tree-id242 . -16) (undo-tree-id243 . -16) (undo-tree-id244 . -16) (undo-tree-id245 . -16) (undo-tree-id246 . -16) (undo-tree-id247 . -16) (undo-tree-id248 . -16) (undo-tree-id249 . -16) (undo-tree-id250 . -16) (undo-tree-id251 . -16)) nil (26553 21038 488677 194000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id230 . -1) (#("                    \"id\": comment.id," 0 20 (fontified t) 20 24 (face font-lock-doc-face fontified t) 24 34 (fontified t) 34 36 (face font-lock-builtin-face fontified t) 36 37 (fontified t)) . -289) (undo-tree-id231 . -20) (undo-tree-id232 . -20) (undo-tree-id233 . -20) (undo-tree-id234 . -20) (undo-tree-id235 . -37) (undo-tree-id236 . -20)) nil (26553 21038 488673 722000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id223 . -1) (#("                    \"body\": comment.body," 0 20 (fontified t) 20 26 (face font-lock-doc-face fontified t) 26 41 (fontified t)) . -289) (undo-tree-id224 . -20) (undo-tree-id225 . -20) (undo-tree-id226 . -20) (undo-tree-id227 . -20) (undo-tree-id228 . -41) (undo-tree-id229 . -20)) nil (26553 21038 488671 265000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id216 . -1) (#("                    \"score\": comment.score," 0 20 (fontified t) 20 27 (face font-lock-doc-face fontified t) 27 31 (fontified t) 31 43 (fontified t)) . -289) (undo-tree-id217 . -20) (undo-tree-id218 . -20) (undo-tree-id219 . -20) (undo-tree-id220 . -20) (undo-tree-id221 . -43) (undo-tree-id222 . -20)) nil (26553 21038 488669 481000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id209 . -1) (#("                    \"author\": str(comment.author)" 0 20 (fontified t) 20 28 (face font-lock-doc-face fontified t) 28 30 (fontified t) 30 33 (face font-lock-builtin-face fontified t) 33 49 (fontified t)) . -289) (undo-tree-id210 . -20) (undo-tree-id211 . -20) (undo-tree-id212 . -20) (undo-tree-id213 . -20) (undo-tree-id214 . -49) (undo-tree-id215 . -20)) nil (26553 21038 488663 206000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 289) (undo-tree-id207 . -1) (#("
" 0 1 (fontified nil)) . 289) (undo-tree-id208 . -1) (#("                })" 0 18 (fontified t)) . -289)) nil (26553 21038 488660 853000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id206 . -1) (#("            data.append(post_data)" 0 34 (fontified t)) . -289)) nil (26553 21038 488659 646000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 289) (undo-tree-id204 . -1) (#("
" 0 1 (fontified nil)) . 289) (undo-tree-id205 . -1) (#("            time.sleep(sleep_time)" 0 34 (fontified t)) . -289)) nil (26553 21038 488659 55000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id203 . -1) (#("        except Exception as e:" 0 8 (fontified t) 8 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 24 (face font-lock-type-face fontified t) 24 25 (fontified t) 25 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t)) . -289)) nil (26553 21038 488658 323000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 289) (undo-tree-id197 . -1) (#("
" 0 1 (fontified nil)) . 289) (undo-tree-id198 . -1) (#("            print(f\"Error fetching post {post['id']}: {e}\")" 0 12 (fontified t) 12 17 (face font-lock-builtin-face fontified t) 17 19 (fontified t) 19 40 (face font-lock-string-face fontified t) 40 47 (face nil fontified t) 47 49 (face font-lock-builtin-face fontified t) 49 52 (face nil fontified t) 52 54 (face font-lock-string-face fontified t) 54 57 (face nil fontified t) 57 58 (face font-lock-string-face fontified t) 58 59 (fontified t)) . -289) (undo-tree-id199 . -12) (undo-tree-id200 . -12) (undo-tree-id201 . -12) (undo-tree-id202 . -12)) nil (26553 21038 488657 767000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id196 . -1) (#("    return data" 0 4 (fontified t) 4 10 (face font-lock-keyword-face fontified t) 10 15 (fontified t)) . -289)) nil (26553 21038 488655 845000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2033 . 2034) (nil fontified nil 289 . 2034) (289 . 2034)) nil (26553 21038 488655 311000) 0 nil])
([nil nil ((#("with open(\"../data/reddit_data.json\", \"w\", encoding=\"utf-8\") as f:
    json.dump(subreddit_data, f, indent=4)
" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-builtin-face fontified t) 9 10 (fontified t) 10 36 (face font-lock-string-face fontified t) 36 38 (fontified t) 38 41 (face font-lock-string-face fontified t) 41 52 (fontified t) 52 59 (face font-lock-string-face fontified t) 59 61 (fontified t) 61 63 (face font-lock-keyword-face fontified t) 63 110 (fontified t)) . 2143) (undo-tree-id191 . -110) (undo-tree-id192 . -110) (undo-tree-id193 . -110) (undo-tree-id194 . -110) (undo-tree-id195 . -110) 2253) nil (26553 21038 488654 966000) 0 nil])
([nil nil ((1858 . 1867)) nil (26553 21038 488653 713000) 0 nil])
([nil nil ((1859 . 1868) (#("        " 0 8 (fontified t)) . 1859) (undo-tree-id189 . -8) (undo-tree-id190 . -8) 1867) nil (26553 21038 488653 429000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1969 . 1970) (nil fontified nil 1923 . 1970) (nil fontified nil 1921 . 1923) (nil fontified nil 1919 . 1921) (nil fontified nil 1912 . 1919) (nil fontified nil 1901 . 1912) (nil fontified nil 1898 . 1901) (nil fontified nil 1896 . 1898) (nil fontified nil 1870 . 1896) (nil fontified nil 1869 . 1870) (nil fontified nil 1865 . 1869) (nil fontified nil 1864 . 1865) (nil fontified nil 1860 . 1864) (1860 . 1970)) nil (26553 21038 488652 39000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -1975) (undo-tree-id187 . -4) (undo-tree-id188 . -4) (1970 . 1971)) nil (26553 21038 488651 392000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 1971) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("    " 0 4 (fontified t)) . -1971) (undo-tree-id184 . -4) (undo-tree-id185 . -4) (undo-tree-id186 . -4)) nil (26553 21038 488650 496000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 1971) (undo-tree-id158 . -1) (#("with open(\"candy_posts_praw.json\", \"w\", encoding=\"utf-8\") as f:" 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 9 (face font-lock-builtin-face fontified t) 9 10 (fontified t) 10 33 (face font-lock-string-face fontified t) 33 35 (fontified t) 35 38 (face font-lock-string-face fontified t) 38 49 (fontified t) 49 56 (face font-lock-string-face fontified t) 56 58 (fontified t) 58 60 (face font-lock-keyword-face fontified t) 60 63 (fontified t)) . -1971)) nil (26553 21038 488643 517000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 1971) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("    json.dump(posts_data, f, indent=4)" 0 38 (fontified t)) . -1971)) nil (26553 21038 488642 912000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2081) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("
" 0 1 (fontified t)) . 2081) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("
" 0 1 (fontified nil)) . 2081) (undo-tree-id146 . -1) (#("subreddit_data = fetch_reddit_data(\"machinelearning\", max_posts=1000)" 0 14 (face font-lock-variable-name-face fontified t) 14 35 (fontified t) 35 52 (face font-lock-string-face fontified t) 52 69 (fontified t)) . -2081) (undo-tree-id147 . -65) (undo-tree-id148 . -65) (undo-tree-id149 . -65) (undo-tree-id150 . -65) (undo-tree-id151 . -65) (undo-tree-id152 . -65) (undo-tree-id153 . -65) (undo-tree-id154 . -65) (undo-tree-id155 . -65)) nil (26553 21038 488641 472000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 2081) (undo-tree-id96 . -1) (#("print(\"Data saved to reddit_data.json\")" 0 5 (face font-lock-builtin-face fontified t) 5 6 (fontified t) 6 38 (face font-lock-string-face fontified t) 38 39 (fontified t)) . -2081)) nil (26553 21038 488460 16000) 0 nil])
([nil nil ((#("
" 0 1 (face font-lock-comment-face fontified nil)) . 2044) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("# Fetch posts from the last 3 months" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 36 (face font-lock-comment-face fontified t)) . -2044)) nil (26553 21038 488458 890000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1941) (undo-tree-id5 . -1) (#("u" 0 1 (fontified t)) . -1942) (undo-tree-id6 . -1) (#("b" 0 1 (fontified t)) . -1943) (undo-tree-id7 . -1) (#("r" 0 1 (fontified t)) . -1944) (undo-tree-id8 . -1) (#("e" 0 1 (fontified t)) . -1945) (undo-tree-id9 . -1) (#("d" 0 1 (fontified t)) . -1946) (undo-tree-id10 . -1) (#("d" 0 1 (fontified t)) . -1947) (undo-tree-id11 . -1) (#("i" 0 1 (fontified t)) . -1948) (undo-tree-id12 . -1) (#("t" 0 1 (fontified t)) . -1949) (undo-tree-id13 . -1) (#("_" 0 1 (fontified t)) . -1950) (undo-tree-id14 . -1) (#("d" 0 1 (fontified t)) . -1951) (undo-tree-id15 . -1) (#("a" 0 1 (fontified t)) . -1952) (undo-tree-id16 . -1) (#("t" 0 1 (fontified t)) . -1953) (undo-tree-id17 . -1) (#("a" 0 1 (fontified t)) . -1954) (undo-tree-id18 . -1) 1955) nil (26553 21038 488439 604000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1950 . 1951) (nil fontified nil 1941 . 1951) (1941 . 1951)) nil (26553 21038 488435 405000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t)) . -700) (undo-tree-id0 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -701) (undo-tree-id1 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -702) (undo-tree-id2 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -703) (undo-tree-id3 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -704) (undo-tree-id4 . -1) 705) nil (26553 21038 488434 757000) 0 nil])
([nil nil ((700 . 701)) nil (26553 21038 488424 593000) 0 nil])
([nil nil ((701 . 715)) nil (26553 21038 488421 783000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-comment-face fontified t)) . -983) (undo-tree-id517 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -984) (undo-tree-id518 . -1) (#("d" 0 1 (face font-lock-comment-face fontified t)) . -985) (undo-tree-id519 . -1) (#("y" 0 1 (face font-lock-comment-face fontified t)) . -986) (undo-tree-id520 . -1) 987 (t 26553 21038 515841 284000)) nil (26553 21063 253976 109000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-comment-face fontified t)) . -982) (undo-tree-id516 . -1) 983) nil (26553 21063 253974 940000) 0 nil])
([nil nil ((982 . 997)) nil (26553 21063 253974 300000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id514 . -1) (#("import praw" 0 6 (face font-lock-keyword-face fontified t) 6 11 (fontified t)) . -289) (undo-tree-id515 . -11)) nil (26553 21063 253973 694000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id512 . -1) (#("import datetime" 0 6 (face font-lock-keyword-face fontified t) 6 15 (fontified t)) . -289) (undo-tree-id513 . -15)) nil (26553 21063 253972 911000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id510 . -1) (#("import json" 0 6 (face font-lock-keyword-face fontified t) 6 11 (fontified t)) . -289) (undo-tree-id511 . -11)) nil (26553 21063 253972 73000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 289) (undo-tree-id506 . -1) (#("
" 0 1 (fontified nil)) . 289) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (#("import time" 0 6 (face font-lock-keyword-face fontified t) 6 11 (fontified t)) . -289) (undo-tree-id509 . -11)) nil (26553 21063 253971 8000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 289) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#("
" 0 1 (face font-lock-comment-face fontified nil)) . 289) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#("# Please do not use my credentials. [Honor system] :D" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 53 (face font-lock-comment-face fontified t)) . -289) (undo-tree-id505 . -36)) nil (26553 21063 253969 281000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (#("REDDIT_CLIENT_ID = \"uUXuGrI3Asl_Qb7o-LzYrQ\"" 0 16 (face font-lock-variable-name-face fontified t) 16 19 (fontified t) 19 43 (face font-lock-string-face fontified t)) . -289) (undo-tree-id497 . -36) (undo-tree-id498 . -19) (undo-tree-id499 . -19)) nil (26553 21063 253907 939000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 289) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (#("REDDIT_CLIENT_SECRET = \"Mg88O33J6YUjbiMfXJUOFvrck-gTYA\"" 0 20 (face font-lock-variable-name-face fontified t) 20 23 (fontified t) 23 55 (face font-lock-string-face fontified t)) . -289) (undo-tree-id491 . -36) (undo-tree-id492 . -23) (undo-tree-id493 . -23)) nil (26553 21063 253906 264000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 289) (undo-tree-id482 . -1) (#("
" 0 1 (fontified nil)) . 289) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (#("REDDIT_USER_AGENT = \"CandyTalk/1.0 by DataLovesCandy\"" 0 17 (face font-lock-variable-name-face fontified t) 17 20 (fontified t) 20 53 (face font-lock-string-face fontified t)) . -289) (undo-tree-id485 . -36) (undo-tree-id486 . -20) (undo-tree-id487 . -20)) nil (26553 21063 253904 439000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 288) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1)) nil (26553 21063 253899 316000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -783) (undo-tree-id521 . -1) 784 (t 26553 21063 271972 24000)) nil (26553 21077 53695 808000) 0 nil])
([nil nil ((783 . 785)) nil (26553 21077 53687 963000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t)) . -328) (undo-tree-id18 . -1) (#("T" 0 1 (fontified t)) . -329) (undo-tree-id19 . -1) (#("_" 0 1 (fontified t)) . -330) (undo-tree-id20 . -1) 331 (t 26553 21077 72044 911000)) nil (26553 21132 754750 16000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t)) . -324) (undo-tree-id14 . -1) (#("E" 0 1 (fontified t)) . -325) (undo-tree-id15 . -1) (#("D" 0 1 (fontified t)) . -326) (undo-tree-id16 . -1) (#("D" 0 1 (fontified t)) . -327) (undo-tree-id17 . -1) 328) nil (26553 21132 754748 922000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t)) . -353) (undo-tree-id7 . -1) (#("E" 0 1 (fontified t)) . -354) (undo-tree-id8 . -1) (#("D" 0 1 (fontified t)) . -355) (undo-tree-id9 . -1) (#("D" 0 1 (fontified t)) . -356) (undo-tree-id10 . -1) (#("I" 0 1 (fontified t)) . -357) (undo-tree-id11 . -1) (#("T" 0 1 (fontified t)) . -358) (undo-tree-id12 . -1) (#("_" 0 1 (fontified t)) . -359) (undo-tree-id13 . -1) 360) nil (26553 21132 754747 303000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t)) . -383) (undo-tree-id0 . -1) (#("E" 0 1 (fontified t)) . -384) (undo-tree-id1 . -1) (#("D" 0 1 (fontified t)) . -385) (undo-tree-id2 . -1) (#("D" 0 1 (fontified t)) . -386) (undo-tree-id3 . -1) (#("I" 0 1 (fontified t)) . -387) (undo-tree-id4 . -1) (#("T" 0 1 (fontified t)) . -388) (undo-tree-id5 . -1) (#("_" 0 1 (fontified t)) . -389) (undo-tree-id6 . -1) 390) nil (26553 21132 754743 528000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 37) (undo-tree-id4 . -1) (#("from datetime import datetime, timedelta" 0 4 (face font-lock-keyword-face fontified t) 4 14 (fontified t) 14 20 (face font-lock-keyword-face fontified t) 20 40 (fontified t)) . -37) (t 26553 21132 760339 14000)) nil (26553 21168 713597 874000) 0 nil])
([nil nil ((36 . 37)) nil (26553 21168 713597 280000) 0 nil])
([nil nil ((37 . 45)) nil (26553 21168 713597 79000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -44) (undo-tree-id3 . -1) 45) nil (26553 21168 713596 824000) 0 nil])
([nil nil ((44 . 52)) nil (26553 21168 713596 167000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 53) (undo-tree-id1 . -1) (#("from pmaw import PushshiftAPI" 0 4 (face font-lock-keyword-face fontified t) 4 10 (fontified t) 10 16 (face font-lock-keyword-face fontified t) 16 29 (fontified t)) . -53) (undo-tree-id2 . -15)) nil (26553 21168 713595 725000) 0 nil])
([nil nil ((53 . 60)) nil (26553 21168 713594 376000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . 53) (undo-tree-id0 . -1) (#("import " 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . -53)) nil (26553 21168 713593 567000) 0 nil])
([nil nil ((53 . 54)) nil (26553 21168 713582 652000) 0 nil])
([nil nil ((#("D6DR45i0cgFBKTqYYTvthQ" 0 22 (fontified t face font-lock-string-face)) . -92) (t 26553 21168 732528 992000)) nil (26553 25076 711800 645000) 0 nil])
([nil nil ((#("5W5" 0 3 (fontified t face font-lock-string-face)) . -111)) nil (26553 25076 711800 406000) 0 nil])
([nil nil ((#("-RBryPtsUL" 0 10 (fontified t face font-lock-string-face)) . -111)) nil (26553 25076 711800 220000) 0 nil])
([nil nil ((#("_sJfcEsnIZ8Sq1APA" 0 17 (fontified t face font-lock-string-face)) . -111)) nil (26553 25076 711799 970000) 0 nil])
([nil nil ((#("script" 0 6 (fontified t face font-lock-string-face)) . -127) (undo-tree-id0 . -3)) nil (26553 25076 711799 739000) 0 nil])
([nil nil ((#(":reddit" 0 7 (fontified t face font-lock-string-face)) . -127)) nil (26553 25076 711791 740000) 0 nil])
([nil nil ((#("-data" 0 5 (fontified t face font-lock-string-face)) . -127)) nil (26553 25076 711791 538000) 0 nil])
([nil nil ((#("-scraper" 0 8 (fontified t face font-lock-string-face)) . -127)) nil (26553 25076 711791 338000) 0 nil])
([nil nil ((#(":v1" 0 3 (fontified t face font-lock-string-face)) . -127)) nil (26553 25076 711791 24000) 0 nil])
([nil nil ((#(".0" 0 2 (fontified t face font-lock-string-face)) . -127)) nil (26553 25076 711790 691000) 0 nil])
([nil nil ((#(" (by" 0 4 (fontified t face font-lock-string-face)) . -127)) nil (26553 25076 711790 420000) 0 nil])
([nil nil ((#(" u" 0 2 (fontified t face font-lock-string-face)) . -127)) nil (26553 25076 711790 19000) 0 nil])
([nil nil ((#("/sreejith2904" 0 13 (fontified t face font-lock-string-face)) . -127)) nil (26553 25076 711789 205000) 0 nil])
([nil current ((#(")" 0 1 (fontified t face font-lock-string-face)) . 127)) nil (26553 25076 711785 925000) 0 nil])
nil
